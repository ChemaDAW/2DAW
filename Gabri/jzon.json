{
	"ConvertirNumeros": {
		"prefix": "jconvertirnumeros",
		"body": [
			"let num = $1;",
			"",
			"let hexadecimal = num.toString(16);",
			"console.log(\"el numero convertido a hexadecimal:\", hexadecimal);",
			"",
			"let octal = num.toString(8);",
			"console.log(\"el numero convertido a octal:\", octal);",
			"",
			"let binario = num.toString(2);",
			"console.log(\"el numero convertido a binario:\", binario);"
		],
		"description": "Convertir un número a Hexadecimal, Octal y Binario"
	},
	"Factorial": {
		"prefix": "jfactorial",
		"body": [
			"function factorial(n) {",
			"    if (n === 0 || n === 1) {",
			"        return 1;",
			"    }",
			"    return n * factorial(n - 1);",
			"}",
			"",
			"console.log(factorial($1));"
		],
		"description": "Calcular el factorial de un número"
	},
	"MayorOMenor": {
		"prefix": "jmayormenor",
		"body": [
			"function mayorMenor(a, b) {",
			"    if (a > b) {",
			"        return \"El mayor es: \" + a;",
			"    } else if (b > a) {",
			"        return \"El mayor es: \" + b;",
			"    } else {",
			"        return \"Los números son iguales.\";",
			"    }",
			"}",
			"",
			"console.log(mayorOMenor($1, $2));"
		],
		"description": "Comparar dos números y mostrar el mayor"
	},
	"NumerosPrimos": {
		"prefix": "jesprimo",
		"body": [
			"function esPrimo(num) {",
			"    for (let i = 2; i < num; i++)",
			"        if (num % i === 0) return false;",
			"    return num > 1;",
			"}",
			"",
			"console.log(esPrimo($1));"
		],
		"description": "Verificar si un número es primo"
	},
	"NumeroAleatorio": {
		"prefix": "jaleatorio",
		"body": [
			"function generarNumeroAleatorio(min, max) {",
			"    return Math.floor(Math.random() * (max - min + 1)) + min;",
			"}",
			"",
			"console.log(generarNumeroAleatorio($1, $2));"
		],
		"description": "Generar un número aleatorio en un rango"
	},
	"MaximoComunDivisor": {
		"prefix": "jmcd",
		"body": [
			"function mcd(a, b) {",
			"    return b === 0 ? a : mcd(b, a % b);",
			"}",
			"",
			"console.log(mcd($1, $2));"
		],
		"description": "Calcular el Máximo Común Divisor (MCD)"
	},
	"MinimoComunMultiplo": {
		"prefix": "jmcm",
		"body": [
			"function mcm(a, b) {",
			"    return (a * b) / mcd(a, b);",
			"}",
			"",
			"function mcd(a, b) {",
			"    return b === 0 ? a : mcd(b, a % b);",
			"}",
			"",
			"console.log(mcm($1, $2));"
		],
		"description": "Calcular el Mínimo Común Múltiplo (MCM)"
	},
	"Palindromo": {
		"prefix": "jpalindromo",
		"body": [
			"function esPalindromo(cadena) {",
			"    const sinEspacios = cadena.replace(/\\s/g, '').toLowerCase();",
			"    const alReves = sinEspacios.split('').reverse().join('');",
			"    return sinEspacios === alReves;",
			"}",
			"",
			"console.log(esPalindromo(\"$1\"));"
		],
		"description": "Verificar si una cadena es un palíndromo"
	},
	"Rombo":{
		"prefix" : "jrombo",
		"body" : [
			
			"var caja = document.getElementById(\"caja\");",
			"var limite = 4;",
			"//Creciente",
			"for (var i = 0; i < limite; i++) {",
			"    var asterisco = \"\";",
			"    var espacioHTML = \"\";",
			"    for (var k = 0; k < limite - i - 1; k++) {",
			"        espacioHTML += \"&nbsp;&nbsp;\";",
			"    }",
			"    for (var j = 1; j <= 2 * i + 1; j++) {",
			"        asterisco += \"*\";",
			"    }",
			"    caja.innerHTML = caja.innerHTML + espacioHTML + asterisco + \"<br>\";",
			"}",
			"//Decreciente",
			"for (var i = limite - 2; i >= 0; i--) {",
			"    var asterisco = \"\";",
			"    var espacioHTML = \"\";",
			"    for (var k = 0; k < limite - i - 1; k++) {",
			"        espacioHTML += \"&nbsp;&nbsp;\";",
			"    }",
			"    for (var j = 1; j <= 2 * i + 1; j++) {",
			"        asterisco += \"*\";",
			"    }",
			"    caja.innerHTML = caja.innerHTML + espacioHTML + asterisco + \"<br>\";",
			"}"
		],
		"description": "Dibujar un rombo"
	},
	"Rombo2":{
		"prefix" : "jrombo2",
		"body" : [
			"var caja = document.getElementById(\"caja\");",
			"var limite = 4;",
			"",
			"// Creciente",
			"for (var i = 0; i < limite; i++) {",
			"    var asteriscos = \"\";",
			"    var espacios = \"\";",
			"    for (var j = 0; j < limite - i - 1; j++) {",
			"        espacios += \" \";",
			"    }",
			"    for (var k = 0; k < 2 * i + 1; k++) {",
			"        if (k === 0 || k === 2 * i) {",
			"            asteriscos += \"*\";",
			"        } else {",
			"            asteriscos += \" \";",
			"        }",
			"    }",
			"    caja.innerHTML += espacios + asteriscos + \"<br>\";",
			"}",
			"",
			"// Decreciente",
			"for (var i = limite - 2; i >= 0; i--) {",
			"    var asteriscos = \"\";",
			"    var espacios = \"\";",
			"    for (var j = 0; j < limite - i - 1; j++) {",
			"        espacios += \" \";",
			"    }",
			"    for (var k = 0; k < 2 * i + 1; k++) {",
			"        if (k === 0 || k === 2 * i) {",
			"            asteriscos += \"*\";",
			"        } else {",
			"            asteriscos += \" \";",
			"        }",
			"    }",
			"    caja.innerHTML += espacios + asteriscos + \"<br>\";",
			"}"
		],
		"description": "Dibujar un rombo"
	},
	"fibonazzi":{
		"prefix" : "jfibonazi",
		"body" : [
			"function calcularFibonacci() {",
			"let numero = prompt(\"Introduce un número entero\");",
			"let secuencia=\"\";",
			"while (isNaN(numero)||numero<0) {",
			"numero=prompt(\"Introduce un numero positivo\");",
			"}",
			"numero = parseInt(numero);",
			"secuencia=\"La secuencia de fibonacci de \"+numero+\" es: \";",
			"for (let i = 0; i <= numero; i++) {",
			"secuencia=secuencia+fibonacci(i)+\" , \";",          
			"}",
			"secuencia = secuencia.slice(0, -2);",
			"document.getElementById(\"sec\").innerHTML=secuencia;",
			"}",
			"",
			"function fibonacci(numero) {",
			"if (numero < 2) {",
			"return numero;",
			"} else {",
			"return fibonacci(numero - 1) + fibonacci(numero - 2);",
			"}",
			"}"
		],
		"description": "fibonanchin recursivo"
	},
	"setCookie":{
		"prefix" : "jsetcookie",
		"body" : [
			"function setCookie(nombre, valor, dias) {"
				"const fechaExpiracion = new Date();"
				"fechaExpiracion.setDate(fechaExpiracion.getDate() + dias);"
				"const cookieValue = escape(valor) + ((dias === null) ? '' : '; expires=' + fechaExpiracion.toUTCString());"
				"document.cookie = nombre + '=' + cookieValue + '; path=/';"
			"}"
		],
		"description": "crear cookie"
	},
	"verCookie":{
		"prefix" : "jresetcookie",
		"body" : [
			"function reiniciarCookies() {"
				"setCookie(nombre, '0', 365);//se fija a un año"
			"}"
		],
		"description": "resetear cookie"
	},
	"crearVentana":{
		"prefix" : "jventana",
		"body" : [
			"function ventana() {"
				"var ventana = window.open('', " "estadisticas", "width=400px,height=400px"");"
				"ventana.document.write();//escribir aqui la info que queremos que se escriba en la ventana"
				"setTimeout(function() {//asignar un cierre cuando pase x tiempo"
					"ventana.close();"
				"}, 10000);//aqui modificamos el tiempo en el que queremos que se cierre(esta puesto a 10 segs)"
			"}"
		],
		"description": "crear ventana"
	},
		"seleccionarColor": {
			"prefix": "jventanaseleccionarcolor",
			"body": [
				"function seleccionarColor() {",
				"    if (ventanaSecundaria && !ventanaSecundaria.closed) {",
				"        var color = document.getElementById(\"colorSelect\").value;",
				"        ventanaSecundaria.document.body.style.backgroundColor = color;",
				"    } else {",
				"        alert(\"La ventana secundaria no está abierta.\");",
				"    }",
				"}"
			],
			"description": "Seleccionar color y establecerlo en una ventana secundaria"
	},
	
		"obtenerCoordenadas": {
			"prefix": "jventanaobtenercoordenadas",
			"body": [
				"function obtenerCoordenadas() {",
				"    if (ventanaSecundaria && !ventanaSecundaria.closed) {",
				"        var x = prompt(\"Introduce la coordenada x para la ventana secundaria:\");",
				"        var y = prompt(\"Introduce la coordenada y para la ventana secundaria:\");",
				"        ventanaSecundaria.moveTo(x, y);",
				"    } else {",
				"        alert(\"La ventana secundaria no está abierta.\");",
				"    }",
				"}"
			],
			"description": "Obtener y establecer coordenadas para una ventana secundaria"
		},
	
	"cronometro":{
		"prefix" : "jcronometro2",
		"body" : [
			"var x; // Variable global para el intervalo"

    "function actualizarContador(duracion) {"
        "var horaFinal = new Date().getTime() + duracion * 1000;"

        "x = setInterval(function() {"
            "var horaActual = new Date().getTime();"
            "var distancia = horaFinal - horaActual;"

            "var dias = Math.floor(distancia / (1000 * 60 * 60 * 24));//Redondeamos convirtiendo a milisegundos"
            "var horas = Math.floor((distancia % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));//Redondeamos convirtiendo a milisegundos"
            "var minutos = Math.floor((distancia % (1000 * 60 * 60)) / (1000 * 60));//Redondeamos convirtiendo a milisegundos"
            "var segundos = Math.floor((distancia % (1000 * 60)) / 1000);//Redondeamos convirtiendo a milisegundos"

            "document.getElementById(\"countdown\").innerHTML = dias + horas + minutos +segundos;"

            "if (distancia < 0) {//Poner a 0 cuando llega a 0 y mostrar una alerta por pantalla"
            "    clearInterval(x);"
            "    document.getElementById(\"countdown\").innerHTML = \"0h 0m 0s\";"
            "    window.alert(\"Fin boom al lio\");"
            "}"
        "}, 1000);"
    "}"

    "function configurarCuentaRegresiva() {"
        "//Asociamos los datos introducidos con las variables"
        "//Convertimos a enteros para poder operar con ellas"
        "var horas = parseInt(document.getElementById(\"horas\").value) || 0;"
        "var minutos = parseInt(document.getElementById(\"minutos\").value) || 0;"
        "var segundos = parseInt(document.getElementById(\"segundos\").value) || 0;"
        "//Convertimos a segundos"
        "var duracion = (horas * 3600) + (minutos * 60) + segundos;"
        "//Mostrar mensaje si la cantidad no es válida"
        "if (duracion > 0) {"
        "    clearInterval(x);"
            "actualizarContador(duracion);"
        	" } else {"
        "    alert(\"Por favor, introduce una duración válida.\");"
        "}"
    "}"],
		"description": "crear crono"
	},
	"getCookie": {
		"prefix": "jgetcookie",
		"body": [
		"function getCookie(nombre) {",
		" const nombreEQ = nombre + '=';",
		"    const cookies = document.cookie.split(';');",
		"    for (let i = 0; i < cookies.length; i++) {",
		"        let cookie = cookies[i];",
		"        while (cookie.charAt(0) === ' ') {",
		"            cookie = cookie.substring(1, cookie.length);",
		"        }",
		"        if (cookie.indexOf(nombreEQ) === 0) {",
		"            return cookie.substring(nombreEQ.length, cookie.length);",
		"        }",
		"    }",
		"    return '';",
		"}"
	],
		"description": "Obtener el valor de una cookie por su nombre"
	},	
		"ordenarArrayDescendente": {
			"prefix": "jordenararrayalreves",
			"body": [
				"array.sort(function (a, b) {",
				"    return b - a;",
				"});"
			],
			"description": "Ordenar un array en orden descendente"
		}
	},
	
